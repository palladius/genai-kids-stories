#!/bin/bash

# Ricc: Initially copied from https://fly.io/ruby-dispatch/rails-on-docker/
#   (Also has a nice Dockerfile - worth copying)
# Also inspired by:
# - https://github.com/gilcierweb/rails-docker/blob/master/entrypoint.sh

set -eo pipefail

# Setting smart defaults
# This is what Cloud Run wants
export PORT="${PORT:-8080}"
# This GalaxyQuest quote enables the long
export ACTIVATE_OMEGA13="${ACTIVATE_OMEGA13:-false}"
# default is using postgres for DB + GCS for Storage
#export RAILS_ENV="${RAILS_ENV:-dev-on-gcp}"
export RAILS_ENV="${RAILS_ENV:-production}"

export RAILS_LOG_TO_STDOUT='1'
export RAILS_SERVE_STATIC_FILES="true"
#export BUNDLE_WITHOUT="development"

# Since we are in prod...
APP_DB_HOST=${APP_DB_HOST:=$PROD_DB_HOST}
APP_DB_USER=${APP_DB_USER:=$PROD_DB_USER}
APP_DB_PASS=${APP_DB_PASS:=$PROD_DB_PASS}
APP_DB_NAME=${APP_DB_NAME:=$PROD_DB_NAME}

echo '👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍'
echo "👍👍👍👍👍👍👍👍👍👍 genai-kids-stories docker entrypoint 👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍"
echo '👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍'
echo "👍 Entrypoint ARGS:                    '$*'"
echo "👍 PORT:                               '$PORT'"
echo "👍 PROJECT_ID:                         '$PROJECT_ID'"
#echo "👍 AI_PROJECT_ID:                      '$AI_PROJECT_ID'"
echo "👍 APP_VERSION:                        '$APP_VERSION'"
echo "👍 RAILS_ENV:                          '$RAILS_ENV'"
echo "👍 GOOGLE_TRANSLATE_KEY (redacted):    '${GOOGLE_TRANSLATE_KEY:1:20}..'"
echo "👍 DANGEROUS_SA_JSON_VALUE (redacted): '$(echo -en ${DANGEROUS_SA_JSON_VALUE:1:50})..'"
echo '👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍'

# If running the rails server then create or migrate existing database
if [ "${*}" == "./bin/rails server" ]; then
  ./bin/rails db:prepare
  # Then continue...
fi



##########################################################
# No argument: plenty of actions.
# 1 argument? Skip to it (for bash and other stuff)
##########################################################
# https://www.youtube.com/watch?v=frN4MU-8JNw
#ACTIVATE_OMEGA13=true
if [ "${*}" == "" -o "${*}" == "echo activate omega13" -o "true" == "$ACTIVATE_OMEGA13" ]; then
  echo '🌌🌌🌌🌌🌌🌌🌌🌌🌌🌌🌌'
  echo '🌌 Omega13 enabled! 🌌'
  echo '🌌🌌🌌🌌🌌🌌🌌🌌🌌🌌🌌'

  echo '01. [Ω13] You were too lazy to give me any var. No probs, sit back and relax, Ricc will do all the magic for you'

  # Great ideas from https://github.com/gilcierweb/rails-docker/blob/master/entrypoint.sh
  # Checking PostgreS is ready:
  echo "02. Checking that postgreS is ready.."
  while ! pg_isready -q -h "$APP_DB_HOST" -U "$APP_DB_USER" ; do
    echo "$(date) [$RAILS_ENV]🔋 waiting for PG DB (host='$APP_DB_HOST') to start.."
    sleep 2
  done
  echo '👍 PostgreS works!'


  # TODO obly execute if needed (from ENV=prod or from RAILS_SERVE_STATIC_FILES ? )
  echo "04. Assets precomp in PROD :)"
  rails assets:precompile

  echo "05. Deleting server.pid file..."
  rm -f /tmp/pids/server.pid

  # I pray Ill be able soon to remove this and use APIs instead of gcloud :)
  echo "06. Setting up gcloud (TODO remove)"
  #echo TODO gcloud config set account  TODOricc
#  if [ ! -f /sa.json ] ; then

  # ls -al /sa.json
  if [ ! -s /sa.json ] ; then # file not empty
   echo "$DANGEROUS_SA_JSON_VALUE" > /sa.json
   echo "👍 File /sa.json just created."
  else
    echo Pointless. File /sa.json already present.
  fi
  # if [ -d /rails/private/ ]; then
  #   # Dockerized version...
  #    echo "$DANGEROUS_SA_JSON_VALUE" > /rails/private/sa.json
  # fi
  gcloud auth activate-service-account --key-file  /sa.json ||
    echo Maybe you dont need this
  gcloud config configurations list
  gcloud auth print-access-token >/dev/null
  echo '👍 gcloud auth print-access-token succesful!!!'


  echo "13. Running database migrations AFTER setting up gcloud..."
  bundle exec rails db:migrate 2>/dev/null || bundle exec rails db:create db:migrate
  echo "👍.. Finished running database migrations."

  echo "🌱99.🌱 No arg given to entrypoint => Starting rails server..."
  rails s -b 0.0.0.0 -p "$PORT"
else
  echo "🌱99.🌱 Non-empty Entrypoint 🌱 Executing now this command: '$@'"
  exec "${@}"
fi

echo "Exiting entrypoint succesfully. What a ride!"
